$date
	Fri Oct 23 20:19:41 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb $end
$var wire 4 ! Rout [3:0] $end
$var wire 1 " Pout $end
$var wire 1 # OSR $end
$var wire 1 $ OSL $end
$var reg 1 % A $end
$var reg 4 & DataIn [3:0] $end
$var reg 1 ' ISL $end
$var reg 1 ( ISR $end
$var reg 1 ) M $end
$var reg 1 * Pin $end
$var reg 4 + S [3:0] $end
$var reg 3 , adr [2:0] $end
$var reg 1 - clk $end
$var reg 1 . reset $end
$var reg 4 / v [3:0] $end
$var reg 1 0 wr $end
$scope module UUT $end
$var wire 1 % A $end
$var wire 4 1 DataIn [3:0] $end
$var wire 1 ' ISL $end
$var wire 1 ( ISR $end
$var wire 1 ) M $end
$var wire 1 * Pin $end
$var wire 4 2 S [3:0] $end
$var wire 3 3 adr [2:0] $end
$var wire 1 - clk $end
$var wire 1 . reset $end
$var wire 4 4 shitout [3:0] $end
$var wire 4 5 v [3:0] $end
$var wire 1 0 wr $end
$var wire 4 6 R [3:0] $end
$var wire 1 " Pout $end
$var wire 4 7 MS_output [3:0] $end
$var reg 1 $ OSL $end
$var reg 1 # OSR $end
$var reg 4 8 RgA [3:0] $end
$var reg 4 9 RgB [3:0] $end
$var reg 4 : Rout [3:0] $end
$scope module ALU $end
$var wire 4 ; A [3:0] $end
$var wire 4 < B [3:0] $end
$var wire 1 ) M $end
$var wire 1 * Pin $end
$var wire 4 = S [3:0] $end
$var wire 4 > R [3:0] $end
$var wire 1 " Pout $end
$var wire 4 ? P [3:0] $end
$var wire 4 @ F [3:0] $end
$var wire 4 A D [3:0] $end
$scope module FCU $end
$var wire 4 B D [3:0] $end
$var wire 4 C F [3:0] $end
$var wire 1 * Pin $end
$var wire 4 D P [3:0] $end
$upscope $end
$scope module SM0 $end
$var wire 1 E A $end
$var wire 1 F B $end
$var wire 1 G D $end
$var wire 1 H F $end
$var wire 1 ) M $end
$var wire 1 * Pin $end
$var wire 1 I Pout $end
$var wire 1 J R $end
$var wire 4 K S [3:0] $end
$upscope $end
$scope module SM1 $end
$var wire 1 L A $end
$var wire 1 M B $end
$var wire 1 N D $end
$var wire 1 O F $end
$var wire 1 ) M $end
$var wire 1 P Pin $end
$var wire 1 Q Pout $end
$var wire 1 R R $end
$var wire 4 S S [3:0] $end
$upscope $end
$scope module SM2 $end
$var wire 1 T A $end
$var wire 1 U B $end
$var wire 1 V D $end
$var wire 1 W F $end
$var wire 1 ) M $end
$var wire 1 X Pin $end
$var wire 1 Y Pout $end
$var wire 1 Z R $end
$var wire 4 [ S [3:0] $end
$upscope $end
$scope module SM3 $end
$var wire 1 \ A $end
$var wire 1 ] B $end
$var wire 1 ^ D $end
$var wire 1 _ F $end
$var wire 1 ) M $end
$var wire 1 ` Pin $end
$var wire 1 a Pout $end
$var wire 1 b R $end
$var wire 4 c S [3:0] $end
$upscope $end
$upscope $end
$scope begin rstblk $end
$var integer 32 d ind [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx d
b0 c
xb
0a
0`
x_
0^
x]
x\
b0 [
xZ
0Y
0X
xW
0V
xU
xT
b0 S
xR
0Q
0P
xO
0N
xM
xL
b0 K
xJ
0I
xH
0G
xF
xE
b0 D
bx C
b0 B
b0 A
bx @
b0 ?
bx >
b0 =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
b0 5
bx 4
b0 3
b0 2
b0 1
00
b0 /
0.
0-
b0 ,
b0 +
0*
0)
0(
0'
b0 &
0%
x$
x#
0"
bx !
$end
#10
1-
#20
0-
1.
#30
0J
0R
0Z
b0 6
b0 >
0b
0H
0O
0W
b0 @
b0 C
0_
b0 7
0F
0M
0U
0]
0E
0L
0T
0\
b0 4
b111 d
b0 !
b0 :
b0 9
b0 <
b0 8
b0 ;
1-
#40
0-
0.
#50
1-
#60
0-
#70
1a
1"
1Q
1X
1`
1P
b1111 ?
b1111 D
1I
1Y
1G
b101 A
b101 B
1V
1E
1T
b101 8
b101 ;
0J
0R
1Z
b100 6
b100 >
0b
1H
1O
1W
b1111 @
b1111 C
1_
b101 7
1-
10
1)
b1111 +
b1111 2
b1111 =
b1111 K
b1111 S
b1111 [
b1111 c
b111 /
b111 5
1%
b101 &
b101 1
#80
0-
#90
b100 4
1-
#100
0-
#110
1U
b100 9
b100 <
1-
00
#120
0-
#130
0P
0J
0I
0G
1^
0H
0E
1\
b1100 8
b1100 ;
0Y
1"
0`
0X
b1000 ?
b1000 D
0Q
1a
0O
b1000 A
b1000 B
0V
b1100 @
b1100 C
1_
0R
1Z
b100 6
b100 >
0b
b1100 7
1-
0)
b100 +
b100 2
b100 =
b100 K
b100 S
b100 [
b100 c
b1100 &
b1100 1
b1 /
b1 5
#140
0-
#150
b100 !
b100 :
1-
b1000 /
b1000 5
#160
0-
#170
1-
#180
0-
#190
1-
#200
0-
#210
1-
#220
0-
#230
1-
#240
0-
#250
1-
